#ifndef STD_WEB_IP6_SRX
#define STD_WEB_IP6_SRX

/**
 *	The ipv6 macro does not capture its elements
 * 
 */

#include <fundamental/alternative.srx>
#include <fundamental/repeat.srx>

#include <web/ipv4.srx>
#include <number/hexadecimal.srx>

#undef MAIN_REGEX_CLASS

/*
matches all of those:

1:2:3:4:5:6:7:8
1::                                 1:2:3:4:5:6:7::
1::8               1:2:3:4:5:6::8   1:2:3:4:5:6::8
1::7:8             1:2:3:4:5::7:8   1:2:3:4:5::8
1::6:7:8           1:2:3:4::6:7:8   1:2:3:4::8
1::5:6:7:8         1:2:3::5:6:7:8   1:2:3::8
1::4:5:6:7:8       1:2::4:5:6:7:8   1:2::8
1::3:4:5:6:7:8     1::3:4:5:6:7:8   1::8
::2:3:4:5:6:7:8    ::2:3:4:5:6:7:8  ::8       ::       
fe80::7:8%eth0     fe80::7:8%1
::255.255.255.255  ::ffff:255.255.255.255  ::ffff:0:255.255.255.255
2001:db8:3:4::192.0.2.33  64:ff9b::192.0.2.33
*/

hex_set(1)

regex __ipv4seg {
	contains: ~__tiny_number;
}

regex __ipv6seg {
	contains: repeat(~hexadecimal, 1, 4);
}

regex __link_local {
	raw: fe80:;
	contains: repeat((?::~__ipv6seg), 0,4);
	raw: %;
	contains: [0-9a-zA-Z]+;
}

regex __mapped_ipv4 {
	contains: ::(?:ffff (?::0{1,4}){0,1}:){0,1};	
	contains: ~ipv4;
}

group ipv6 {
	contains: repeat(group(~__ipv6seg:), 7, 7)~__ipv6seg;
	raw: |;
	contains: repeat(group(~__ipv6seg:), 1, 7):;
	raw: |;
	contains: repeat(group(~__ipv6seg:), 1, 6):~__ipv6seg;
	raw: |;
	contains: (?:repeat(group(~__ipv6seg:), 1, 5) repeat(group(:~__ipv6seg), 1, 2));
	raw: |;
	contains: (?:repeat(group(~__ipv6seg:), 1, 4) repeat(group(:~__ipv6seg), 1, 3));
	raw: |;
	contains: (?:repeat(group(~__ipv6seg:), 1, 3) repeat(group(:~__ipv6seg), 1, 4));
	raw: |;
	contains: (?:repeat(group(~__ipv6seg:), 1, 2) repeat(group(:~__ipv6seg), 1, 5));
	raw: |;
	contains: ~__ipv6seg:(?:group(:~__ipv6seg){1, 6});
	raw: |;
	contains: :group(repeat(group(:~__ipv6seg), 1, 7)|:);
	raw: |;
	contains: ~__link_local;
	raw: |;
	contains: ~__mapped_ipv4;
	raw: |;
	contains: group(~__ipv6seg:){1,4}:~ipv4;
}

#endif
